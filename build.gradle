import org.apache.tools.ant.filters.*

group 'xyz.ronella.tools'
version '2.1.0'

apply plugin: 'groovy'

sourceCompatibility = 1.11

ext {
    packDirPath = "${buildDir}/pack"
    buildBaseName = 'sql-servant'
}

repositories {
    mavenCentral()
}

configurations {
    drivers
    mssql
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.8'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
    compile group: 'commons-io', name: 'commons-io', version: '2.11.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.8.0'
    drivers group: 'com.h2database', name: 'h2', version: '1.4.200'
    mssql group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '9.2.1.jre11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
}

jar {
    it.baseName = buildBaseName
    exclude 'conf'
    exclude 'drivers'
    exclude '*.bat'
}

processResources {
    from (sourceSets.main.resources) {
        include '**/*.properties'
        filter ReplaceTokens, tokens : ['app.version': project.version,
                                        'year' : new Date().format('MMM YYYY')]
    }
}

String getLibs() {
    configurations.compile.inject(new String(), {___aggr, ___file ->
        "${___aggr}${(___aggr.length()>1 ? ';' : '')}%LIBS_DIR%\\${___file.name}"})
}

String getDrvs() {
    configurations.drivers.inject(new String(), {___aggr, ___file ->
        "${___aggr}${(___aggr.length()>1 ? ';' : '')}%DRVS_DIR%\\${___file.name}"})
}

String getLibsNoArch() {
    configurations.compile.inject(new String(), {___aggr, ___file ->
        "${___aggr}${(___aggr.length()>1 ? ':' : '')}\${LIBS_DIR}/${___file.name}"})
}

String getDrvsNoArch() {
    configurations.drivers.inject(new String(), {___aggr, ___file ->
        "${___aggr}${(___aggr.length()>1 ? ':' : '')}\${DRVS_DIR}/${___file.name}"})
}

String getDrvsMSSQL() {
    configurations.mssql.inject(getDrvs(), {___aggr, ___file ->
        "${___aggr}${(___aggr.length()>1 ? ';' : '')}%DRVS_DIR%\\${___file.name}"})
}

task pack(type: Zip, dependsOn: 'jar') {
    group = buildBaseName
    it.baseName = "${buildBaseName}-noarch"
    destinationDir = file(packDirPath)

    from(file("${sourceSets.main.resources.srcDirs.first()}/conf")) {
        into 'conf'
        include 'ss-h2*.json'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/scripts")) {
        into 'scripts'
        include '*.*'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/listeners")) {
        into 'listeners'
        include '*.*'
    }
    from(sourceSets.main.resources.srcDirs.first()) {
        include '*.bat'
        include 'log4j.*'
        filter ReplaceTokens, tokens : ['app.version': project.version,
                                        'libraries' : getLibs(),
                                        'drivers' : getDrvs(),
                                        'java.library.path' : '']
    }
    from(sourceSets.main.resources.srcDirs.first()) {
        include 'sqlsrvnt'
        filter ReplaceTokens, tokens : ['app.version': project.version,
                                        'libraries' : getLibsNoArch(),
                                        'drivers' : getDrvsNoArch(),
                                        'java.library.path' : '']
    }
    from(file(projectDir)) {
        include '*.md'
    }
    from(configurations.compile) {
        into 'libs'
    }
    from(configurations.drivers) {
        into 'drivers'
    }
    from(file("${buildDir}/libs")) {
        include 'sql*.jar'
        into 'libs'
    }
}

task packMSSQLx64(type: Zip, dependsOn: 'jar') {
    group = buildBaseName
    it.baseName = "${buildBaseName}-win64"
    destinationDir = file(packDirPath)

    from(file("${sourceSets.main.resources.srcDirs.first()}/conf")) {
        into 'conf'
        include 'ss-*.json'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/scripts")) {
        into 'scripts'
        include '*.*'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/listeners")) {
        into 'listeners'
        include '*.*'
    }
    from(sourceSets.main.resources.srcDirs.first()) {
        include '*.bat'
        include 'log4j.*'
        filter ReplaceTokens, tokens : ['app.version': project.version,
                                        'libraries' : getLibs(),
                                        'drivers' : getDrvsMSSQL(),
                                        'java.library.path' : '-Djava.library.path=%DRVS_DIR%']
    }
    from(file(projectDir)) {
        include '*.md'
    }
    from(configurations.compile) {
        into 'libs'
    }
    from(configurations.drivers) {
        into 'drivers'
    }
    from(configurations.mssql) {
        into 'drivers'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/drivers/sqljdbc_9.2/x64")) {
        include 'mssql*.dll'
        into 'drivers'
    }
    from(file("${buildDir}/libs")) {
        include 'sql*.jar'
        into 'libs'
    }
}

task packMSSQLx86(type: Zip, dependsOn: 'jar') {
    group = buildBaseName
    it.baseName = "${buildBaseName}-win32"
    destinationDir = file(packDirPath)

    from(file("${sourceSets.main.resources.srcDirs.first()}/conf")) {
        into 'conf'
        include 'ss-*.json'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/scripts")) {
        into 'scripts'
        include '*.*'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/listeners")) {
        into 'listeners'
        include '*.*'
    }
    from(sourceSets.main.resources.srcDirs.first()) {
        include '*.bat'
        include 'log4j.*'
        filter ReplaceTokens, tokens : ['app.version': project.version,
                                        'libraries' : getLibs(),
                                        'drivers' : getDrvsMSSQL(),
                                        'java.library.path' : '-Djava.library.path=%DRVS_DIR%']
    }
    from(file(projectDir)) {
        include '*.md'
    }
    from(configurations.compile) {
        into 'libs'
    }
    from(configurations.drivers) {
        into 'drivers'
    }
    from(configurations.mssql) {
        into 'drivers'
    }
    from(file("${sourceSets.main.resources.srcDirs.first()}/drivers/sqljdbc_9.2/x86")) {
        include 'mssql*.dll'
        into 'drivers'
    }
    from(file("${buildDir}/libs")) {
        include 'sql*.jar'
        into 'libs'
    }
}

task packAll(dependsOn: ['pack', 'packMSSQLx64', 'packMSSQLx86']) {
    group = buildBaseName
}